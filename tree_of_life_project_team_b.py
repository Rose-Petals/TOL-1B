# -*- coding: utf-8 -*-
"""Tree of Life Project Team B

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1F7lqTS6XdtHU_okaOijPEMU2XN8C1j8J

# **Tree of Life Plan Team B**

## Load Data
"""

import pandas as pd

url = "https://raw.githubusercontent.com/Rose-Petals/TOL-1B/main/TOLCC%20Break%20Through%20Tech%20Dataset%20(1).csv"

df = pd.read_csv(url)

print(df.head())

"""## Data Cleaning

### Removing and Renaming Columns
"""

df = df.drop(columns=[col for col in df.columns if "Unnamed" in col])
df = df.drop(columns=["Please be specific on who sent you our way, we'd like to thank them. "])
print(df.columns)

df.columns = df.columns.str.strip().str.lower().str.replace(" ", "_")

print(df.columns)

df.rename(columns={'if_talk_therapy,_specifically_what_type?': 'talk_therapy_type'}, inplace=True)
df.columns

"""### Handling Missing Values"""

print(df.isnull().sum())

df['talk_therapy_type'] = df['talk_therapy_type'].fillna("not_talk_therapy")
print(df.isnull().sum())

# Column Types
df.dtypes

# 'age' is a categorical variable with nan values.
print("Number of unique categories for 'age' column : ", df['age'].nunique())
print()
print(df['age'].unique())

"""###### The 'appointment_time' column is our column of interest. So, remove the row with a missing value for 'appointment time."""

print("Number of rows in df before drop : ", df.shape[0])
print()
print(df[df['appointment_time'].isnull()])
to_remove_index = df[df['appointment_time'].isnull()].index
df.drop(to_remove_index, inplace = True)
print()
print("Number of rows in df after drop: ", df.shape[0])

# Replacing missing values in the other categorical variables with 'Unknown'
categorical_cols = ['references', 'age', 'town', 'insurance_carrier', 'appointment_location', 'appointment_type']

for col in categorical_cols:
  df[col] = df[col].fillna("Unknown")

print(df.isnull().sum())

# Number of unique values in each column
df.nunique()

"""### Reducing number of categories

##### Group some of the categories for columns like age and town that have a large number of unique categories.
"""

